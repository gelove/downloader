name: Release
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short
  # RUST_BACKTRACE: full
  # CARGO_PROFILE_RELEASE_BUILD_OVERRIDE_DEBUG: true

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
          - platform: macos-latest
            target: x86_64-apple-darwin
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          # node-version: lts/*
          node-version: "20"
          cache: "pnpm"

      - name: Install frontend dependencies
        run: pnpm install

      - name: Fetch Release Asset URL
        uses: actions/github-script@v7
        id: fetch-asset
        with:
          script: |
            const targetMap = {
              "aarch64-apple-darwin": "ffmpeg-aarch64-apple-darwin",
              "x86_64-apple-darwin": "ffmpeg-x86_64-apple-darwin",
              "x86_64-pc-windows-msvc": "ffmpeg.exe",
            };
            const assetName = targetMap["${{ matrix.target }}"];
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "ffmpeg",
            });
            const asset = release.assets.find((a) => assetName && a.name === assetName);
            if (!asset) {
              throw new Error(`Asset not found for target ${{ matrix.target }}`);
            }
            core.setOutput("name", assetName);
            core.setOutput("download_url", asset.browser_download_url);

      - name: ⬇️ Download ffmpeg
        shell: bash # 强制使用 Bash
        run: |
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            curl -L -o src-tauri/bin/windows/${{ steps.fetch-asset.outputs.name }} "${{ steps.fetch-asset.outputs.download_url }}"
            ls -lR src-tauri/bin
          else
            curl -L -o src-tauri/bin/${{ steps.fetch-asset.outputs.name }} "${{ steps.fetch-asset.outputs.download_url }}"
            ls -lR src-tauri/bin
          fi

      - name: 🔧 Install 🦀 Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-all-crates: true

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          # tagName: v__VERSION__
          tagName: ${{ github.ref_name }}
          releaseName: "Downloader v__VERSION__"
          releaseBody: "👀 See the 📂 assets to ⬇️ download this 🆕 version and 🔧 install."
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.target }}

      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # 运行自定义脚本
        run: pnpm updater
